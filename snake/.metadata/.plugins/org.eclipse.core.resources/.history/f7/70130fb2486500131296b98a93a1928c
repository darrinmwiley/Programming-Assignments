import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.awt.Graphics2D;
import java.awt.Canvas;
import java.awt.event.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import static java.lang.Character.*;
import static java.lang.System.*;
import java.awt.image.BufferedImage;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import java.lang.*;
import java.util.*;
import java.awt.*;
import java.io.*;

public class SnakePanel extends Canvas implements KeyListener,MouseListener
{
	//Entity[][] field;
	BufferedImage window;
	
	TimerTask t = new TimerTask(){
		@Override
		public void run() {
			//Thread.currentThread().sleep(5);
	        //repaint();
			System.out.println("tick");
		}};
	
	public SnakePanel()
	{		
		addMouseListener(this);
		this.addKeyListener(this);
		setup();
	}
	public void setup()
	{	
		readScores();
		new Timer().scheduleAtFixedRate(t,0,50);
		setVisible(true);
		//displayTitle();
		//read in r and c later
		int r = 10;
		int c = 10;
		//field = new Entity[r][c];
		window = new BufferedImage(SnakeRunner.WIDTH,SnakeRunner.HEIGHT,BufferedImage.TYPE_3BYTE_BGR);
		
	}
	public void readScores()
	{
	}
	public void insertScore(int i)
	{
	}
	public void writeScores()
	{
	}
	/*public BufferedImage getMaze()
	{
		Graphics window = screen.createGraphics();
		Graphics2D twoDGraph = (Graphics2D)window;
		
		twoDGraph.drawImage(screen, null, 0, 0);
		updateflag = false;
		return screen;//ImageCloner.cloneImage(screen);
	}
	public BufferedImage drawScreen()
	{
		BufferedImage screen = getMaze();
		Maze maze = mazes.get(mazenum);
		if(gamemode.equals("hard")&&tick%6==0);
		{
			updateflag = true;
		}			
		Graphics window = screen.createGraphics();
		Graphics2D twoDGraph = (Graphics2D)window;	
		if(!(gamemode.equals("hard")))
		{
			for(Monster m:monsters)
			{
				if(m.floor()==mazenum)
				{
					m.draw(window,m.xPos(),m.yPos());
				}
			}
			for(Shot sh:shots)
			{
				sh.draw(window,sh.xPos(),sh.yPos());
			}	
		}	
		player.draw(window,player.xPos(),player.yPos());	
		twoDGraph.drawImage(screen, null, 0, 0);
		return screen;
	}
	public void displayTitle()
	{
	}
    public void update(Graphics window)
    {
   		paint(window);
    }
	public void paint( Graphics window )
	{
		Graphics2D twoDGraph = (Graphics2D)window;
		back = (BufferedImage)(createImage(getWidth(),getHeight()));
		Graphics graphToBack = back.createGraphics();
		
		if(displayTitle)
		{
			if(tick==-1)
			{
			graphToBack.drawImage(background,0,0,745,663,null);
			graphToBack.drawImage(title,0,245,745,141,null);
			twoDGraph.drawImage(back,null,0,0);
			tick++;
			try{
			Thread.sleep(2000);
			}catch(Exception e){}
			}			
			
			graphToBack.drawImage(menu,0,0,745,663,null);
			twoDGraph.drawImage(back,null,0,0);
			//displayTitle = false;
			//enter-195,317,543,358
			//exit-196,365,307,405
			//help-316,365,424,404
			//options-,433,365,545,405
			//high scores-196,412,545,451
		}else if(optionflag)
		{
		graphToBack.drawImage(options,0,0,745,663,null);
		renderOptions(graphToBack);	
		}else if(helpflag)
		{
		graphToBack.drawImage(help,0,0,745,663,null);	
		}else if(scoreflag)
		{	
		graphToBack.drawImage(scores,0,0,745,663,null);	
		renderScores(graphToBack);
		}
		else if(!startflag)
		{
			startflag = true;
			setup(window);
			out.println("setting up");
		}
		else if(shopflag){		
		graphToBack.drawImage(shop,0,0,745,663,null);
		Player.drawShop(graphToBack);
		twoDGraph.drawImage(back, null, 0, 0);
		}else if(loseflag)
		{
		graphToBack.drawImage(gameover,0,0,745,663,null);
		}else
		{
			if(player.health()==0)
			{
				insertScore(score);
				writeScores();
				loseflag = true;
			}
			if(descendflag)
				descend(window);
			descendflag = false;
			renderHealth(graphToBack);
			renderMana(graphToBack);
			BufferedImage screen = drawScreen();
			int x = Math.max(player.xPos()-325,0);
			int y = Math.max(player.yPos()-325,0);
			int wid = Math.min(663,screen.getWidth()-x);
			int ht = Math.min(663,screen.getHeight()-y);
			int x1 = x-(663-wid);
			int y1 = y-(663-ht);
			BufferedImage section = screen.getSubimage(x,y,wid,ht);
			graphToBack.drawImage(section,0,0,null);
			if((tick%3)==0)
			{
				eraseMonsters();
				moveMonsters();
				if((tick%4)==0)
					player.increaseMana();	
			}			
			tick++;
			//renderMonsters(graphToBack);
			eraseShots(screen);
			moveShots();
			//drawShots(graphToBack);
			checkForHits();
			if(invincible)
				icount--;
			combat++;
			if(combat%500==0&&combat>0&&gamemode.equals("easy"))
				player.heal(1);			
			graphToBack.setFont(f);
			graphToBack.drawString(score+"",663,530);
			if(icount == 0)
				invincible = false;
			player.erase();
			if(up&&canMove("up"))
				player.move("up");
			if(down&&canMove("down"))
				player.move("down");
			if(right&&canMove("right"))
				player.move("right");
			if(left&&canMove("left"))
				player.move("left");
			if(mazes.get(mazenum).get(mazes.get(mazenum).rows()-2,mazes.get(mazenum).cols()-2)instanceof Crystal)
			{
				if(((int)(Math.random()*1000)==0&&!heaven)||hell)
				{
					Crystal c = (Crystal)(mazes.get(mazenum).get(mazes.get(mazenum).rows()-2,mazes.get(mazenum).cols()-2));
					c.spawnMonster(maze,monsters,mazenum);
				}
			}	
			twoDGraph.drawImage(back, null, 0, 0);
		}
	twoDGraph.drawImage(back,null,0,0);
	}*/
	public void mousePressed(MouseEvent e)
	{
	}
	public void mouseEntered(MouseEvent e)
	{
	}
	public void mouseClicked(MouseEvent e)
	{
	}
	public void renderScores(Graphics window)
	{
	}
	public void renderOptions(Graphics window)
	{
	}
	public void mouseReleased(MouseEvent e)
	{
	}
	public void mouseExited(MouseEvent e)
	{
	}
	public void keyPressed(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE)
		{
		}
		if(e.getKeyCode() == KeyEvent.VK_ESCAPE)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_E)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_D)
		{	
		}
		if (e.getKeyCode() == KeyEvent.VK_W)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_S)
		{	
		}
		if (e.getKeyCode() == KeyEvent.VK_A)
		{		
		}
		repaint();
	}
	public void keyReleased(KeyEvent e)
	{
		if (e.getKeyCode() == KeyEvent.VK_LEFT)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_UP)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_F)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_D)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_W)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_S)
		{
		}
		if (e.getKeyCode() == KeyEvent.VK_A)
		{
		}
		repaint();
	}
	public void keyTyped(KeyEvent e)
	{
	}
}
